<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Writeups</title>
    <link>https://shangrui-hash.github.io/zh/</link>
    <description>Recent content on Writeups</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 17 Mar 2023 18:12:41 +0800</lastBuildDate>
    <atom:link href="https://shangrui-hash.github.io/zh/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>对WHATWG URL标准与RFC URL标准不一致性的研究</title>
      <link>https://shangrui-hash.github.io/zh/posts/a_research_of_inconsistencies_in_front_and_backend_url_parsers/</link>
      <pubDate>Fri, 17 Mar 2023 18:12:41 +0800</pubDate>
      <guid>https://shangrui-hash.github.io/zh/posts/a_research_of_inconsistencies_in_front_and_backend_url_parsers/</guid>
      <description>2022年8月份在挖天融信SRC的时候，发现天融信的某个站点使用了redacted系统，于是便在github上下载了redacted的源码，审计了一下。&#xA;Source &amp;amp; Sink 通过审计发现，redacted系统在多处使用goto 参数来实现页面的重定向，比如说登录功能:&#xA;http://demo.redacted.com/login?goto=/ 已经登录的用户如果访问该URL，后端将会读取goto参数的值，将其填充到twig模板中的div标签的自定义属性data-goto中:&#xA;{% block content %} &amp;lt;div id=&amp;#34;page-message-container&amp;#34; class=&amp;#34;page-message-container&amp;#34; data-goto=&amp;#34;{{ goto }}&amp;#34; data-duration={{ duration }}&amp;gt; &amp;lt;div class=&amp;#34;page-message-panel&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;page-message-heading&amp;#34;&amp;gt; &amp;lt;h2 class=&amp;#34;page-message-title&amp;#34;&amp;gt;{{ title|trans }}&amp;lt;/h2&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;page-message-body&amp;#34;&amp;gt;{{ message|default(&amp;#39;&amp;#39;)|trans|raw }}&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; {% endblock %} 之后前端通过如下js代码读取data-goto属性的值，通过window.location.href实现页面的跳转:&#xA;function (e, t) { var n = $(&amp;#34;#page-message-container&amp;#34;), r = n.data(&amp;#34;goto&amp;#34;), o = n.data(&amp;#34;duration&amp;#34;); o &amp;gt; 0 &amp;amp;&amp;amp; r &amp;amp;&amp;amp; setTimeout((function () { window.location.href = r }), o) } Sanitizer/Filter redacted为了防止在页面重定向的过程中出现开放重定向漏洞（OR）和XSS ，专门在后端写了一个过滤器，对goto参数中的URL进行过滤:</description>
    </item>
    <item>
      <title>Go语言项目容器化导致的Server-Side MIME Sniff</title>
      <link>https://shangrui-hash.github.io/zh/posts/xss-via-server-side-mime-sniff/</link>
      <pubDate>Thu, 02 Mar 2023 01:49:29 +0800</pubDate>
      <guid>https://shangrui-hash.github.io/zh/posts/xss-via-server-side-mime-sniff/</guid>
      <description>answerdev/answer 是基于go语言编写的一个问答平台（类似于知乎），前几周在审计该项目时，发现该系统的图片上传功能点存在一个有趣的漏洞。&#xA;该系统的图片上传功能点的工作原理大致如下:&#xA;step1. 用户上传图片文件，将文件存储在本地文件系统中 step2. 当需要访问图片时，使用gin框架提供的静态资源服务器将用户上传的图片文件作为静态资源返回给用户 internal/router/static_router.go&#xA;// RegisterStaticRouter register static api router func (a *StaticRouter) RegisterStaticRouter(r *gin.RouterGroup) { r.Static(&amp;#34;/uploads&amp;#34;, a.serviceConfig.UploadPath) } 为了防止用户上传恶意文件，该系统的文件上传功能设置了一个后缀白名单, 用户只能上传白名单中后缀的文件&#xA;internal/service/uploader/upload.go&#xA;FormatExts = map[string]imaging.Format{ &amp;#34;.jpg&amp;#34;: imaging.JPEG, &amp;#34;.jpeg&amp;#34;: imaging.JPEG, &amp;#34;.png&amp;#34;: imaging.PNG, &amp;#34;.gif&amp;#34;: imaging.GIF, &amp;#34;.tif&amp;#34;: imaging.TIFF, &amp;#34;.tiff&amp;#34;: imaging.TIFF, &amp;#34;.bmp&amp;#34;: imaging.BMP, } 起初，我在本地搭建了该项目，对文件上传功能和静态资源服务的进行了测试：我尝试上传文件内容为&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; , 文件后缀为 &amp;lsquo;.bmp&amp;rsquo; &amp;lsquo;.tif&amp;rsquo; &amp;lsquo;.tiff&amp;rsquo; 的文件，然后通过静态资源服务访问这些文件，我发现返回的响应报文中Content-Type 分别为 image/bmp image/tiff image/tiff ，这些MIME都是正常的图片类型，无法使得浏览器将响应报文中的内容作为html来解析，从而造成XSS 。&#xA;但是，神奇的是当我使用 answer 官方提供的docker镜像来搭建answer时:&#xA;docker run -d -p 9080:80 -v answer-data:/data --name answer answerdev/answer:latest 再次上传同样的文件，然后访问文件，发现返回的http响应报文的Content-Type 竟然变为了 text/html !</description>
    </item>
  </channel>
</rss>
